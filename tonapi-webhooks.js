#!/usr/bin/env node
/**
 * TONAPI Webhooks CLI
 *
 * –ö–æ–º–∞–Ω–¥—ã:
 *   # —Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫
 *   node tonapi-webhooks.js create --endpoint https://your-server.com/webhook
 *
 *   # –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫–æ–≤
 *   node tonapi-webhooks.js list
 *
 *   # —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫
 *   node tonapi-webhooks.js delete --id 5
 *
 *   # –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 *   node tonapi-webhooks.js subscribe --id 5 --accounts 0:abc...,0:def...
 *
 *   # –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
 *   node tonapi-webhooks.js unsubscribe --id 5 --accounts 0:abc...,0:def...
 *
 * –û–ø—Ü–∏–∏:
 *   --useQuery        –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–∫ ?token= –≤–º–µ—Å—Ç–æ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–∞
 *   --endpoint, -e    URL –≤–∞—à–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è create
 *   --id, -i          ID –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è delete/subscribe/unsubscribe)
 *   --accounts, -a    –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–¥–ª—è subscribe/unsubscribe)
 *
 * –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:
 *   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω: export TONAPI_TOKEN="eyJhbGciOi..."
 *   –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Authorization: Bearer <token>.
 *   –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ ?token= —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ --useQuery.
 */

const BASE = "https://rt.tonapi.io";
const TOKEN = process.env.TONAPIKEY;

if (!TOKEN) {
  console.error("‚ùå Env TONAPI_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://tonconsole.com/ –∏ —Å–¥–µ–ª–∞–π—Ç–µ: export TONAPI_TOKEN=...");
  process.exit(1);
}

const args = parseArgs(process.argv.slice(2));
const useQuery = !!args.useQuery;

(async () => {
  try {
    switch ((args._[0] || "").toLowerCase()) {
      case "create": {
        const endpoint = args.endpoint || args.e;
        if (!endpoint) throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω --endpoint");
        const res = await api("/webhooks", { method: "POST", body: { endpoint } });
        console.log("‚úÖ Webhook —Å–æ–∑–¥–∞–Ω:", res);
        break;
      }
      case "list": {
        const res = await api("/webhooks", { method: "GET" });
        console.log("üìã Webhooks:", JSON.stringify(res, null, 2));
        break;
      }
      case "delete": {
        const id = getIdArg(args);
        await api(`/webhooks/${id}`, { method: "DELETE" });
        console.log(`üóëÔ∏è  Webhook ${id} —É–¥–∞–ª–µ–Ω`);
        break;
      }
      case "subscribe": {
        const id = getIdArg(args);
        const accounts = parseAccountsArg(args);
        // –¢–µ–ª–æ: {"accounts":[{"account_id":"..."}]}
        const payload = { accounts: accounts.map((a) => ({ account_id: a })) };
        const res = await api(`/webhooks/${id}/account-tx/subscribe`, {
          method: "POST",
          body: payload,
        });
        console.log(`üîî –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –¥–ª—è webhook ${id}:`, JSON.stringify(res, null, 2));
        break;
      }
      case "unsubscribe": {
        const id = getIdArg(args);
        const accounts = parseAccountsArg(args);
        // –¢–µ–ª–æ: {"accounts":["...","..."]}
        const payload = { accounts };
        const res = await api(`/webhooks/${id}/account-tx/unsubscribe`, {
          method: "POST",
          body: payload,
        });
        console.log(`üîï –û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è webhook ${id}:`, JSON.stringify(res, null, 2));
        break;
      }
      case "help":
      case "":
      default:
        printHelp();
        process.exit(0);
    }
  } catch (err) {
    if (err?.responseJson) {
      console.error("‚ùå –û—à–∏–±–∫–∞:", JSON.stringify(err.responseJson, null, 2));
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞:", err.message || err);
    }
    process.exit(1);
  }
})();

/** --- helpers --- */

async function api(path, { method = "GET", body } = {}) {
  const url = new URL(BASE + path);
  if (useQuery) {
    url.searchParams.set("token", TOKEN);
  }

  const headers = { "Content-Type": "application/json" };
  if (!useQuery) {
    headers.Authorization = `Bearer ${TOKEN}`;
  }

  const res = await fetch(url, {
    method,
    headers,
    body: body ? JSON.stringify(body) : undefined,
  });

  const text = await res.text();
  let json;
  try {
    json = text ? JSON.parse(text) : {};
  } catch {
    json = { raw: text };
  }

  if (!res.ok) {
    const err = new Error(`HTTP ${res.status} ${res.statusText}`);
    err.responseJson = json;
    throw err;
  }
  return json;
}

function parseArgs(argv) {
  const out = { _: [] };
  let key = null;
  for (const a of argv) {
    if (a.startsWith("--")) {
      key = a.slice(2);
      if (key === "useQuery") {
        out.useQuery = true;
        key = null;
      } else {
        out[key] = true; // –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞–≤–∏–º true, –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Ç–æ–∫–µ–Ω–æ–º
      }
    } else if (a.startsWith("-")) {
      key = a.slice(1);
      out[key] = true;
    } else if (key) {
      out[key] = a;
      key = null;
    } else {
      out._.push(a);
    }
  }
  return out;
}

function getIdArg(a) {
  const id = a.id || a.i;
  if (!id) throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω --id");
  return id;
}

function parseAccountsArg(a) {
  const raw = a.accounts || a.a;
  if (!raw) throw new Error("–ù–µ —É–∫–∞–∑–∞–Ω --accounts (—Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)");
  // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
  const list = String(raw)
    .split(/[,\s]+/g)
    .map((s) => s.trim())
    .filter(Boolean);
  if (list.length === 0) throw new Error("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤");
  return list;
}

function printHelp() {
  console.log(`
TONAPI Webhooks CLI

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node tonapi-webhooks.js create --endpoint https://your-server.com/webhook
  node tonapi-webhooks.js list
  node tonapi-webhooks.js delete --id 5
  node tonapi-webhooks.js subscribe --id 5 --accounts 0:abc...,0:def...
  node tonapi-webhooks.js unsubscribe --id 5 --accounts 0:abc...,0:def...

–û–ø—Ü–∏–∏:
  --useQuery        –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∫–∞–∫ ?token= –≤–º–µ—Å—Ç–æ Authorization –∑–∞–≥–æ–ª–æ–≤–∫–∞
  --endpoint, -e    URL –≤–∞—à–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è create)
  --id, -i          ID –≤–µ–±—Ö—É–∫–∞ (–¥–ª—è delete/subscribe/unsubscribe)
  --accounts, -a    –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª—ã

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  TONAPI_TOKEN      –í–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π API –∫–ª—é—á (Bearer/Query)
`);
}
