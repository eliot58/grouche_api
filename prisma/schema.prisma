// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  wallet               String   @id
  limit                Int      @default(0)

  totalDonated         Float    @default(0)
  initiativesCreated   Int      @default(0)
  initiativesSupported Int      @default(0) 
  votesParticipated    Int      @default(0) 

  charities Charity[]
  donations DonationHistory[]
  votes     Vote[]
}

model Charity {
  id                  Int            @id @default(autoincrement())
  title               String
  deadline            DateTime
  donation_needed     Float
  donation_collected  Int            @default(0)
  donators_count      Int            @default(0)
  images              Json
  description         String
  contact             String
  address             String?
  status              CharityStatus  @default(in_review)
  created_at          DateTime       @default(now())

  rejectedDate        DateTime?

  authorWallet        String
  author              User           @relation(fields: [authorWallet], references: [wallet])

  history             DonationHistory[] 

  votes               Vote[]
  votes_yes           Int            @default(0)
  votes_no            Int            @default(0)
}

model Vote {
  charityId   Int
  userWallet  String
  choice      VoteChoice
  created_at  DateTime @default(now())

  charity     Charity @relation(fields: [charityId], references: [id], onDelete: Cascade)
  user        User    @relation(fields: [userWallet], references: [wallet], onDelete: Cascade)

  @@id([charityId, userWallet])
  @@index([userWallet])
  @@index([charityId, choice])
}

enum VoteChoice {
  yes
  no
}

model DonationHistory {
  id              Int       @id @default(autoincrement())
  username        String
  comment         String?
  crypto_type     String
  donation_amount Float
  created_at      DateTime  @default(now())

  userWallet      String
  user            User      @relation(fields: [userWallet], references: [wallet])

  charityId       Int
  charity         Charity   @relation(fields: [charityId], references: [id])
}


model NftItems {
  index      Int     @id
  address    String  @unique
  content    String
  is_checked Boolean @default(false)
  sender     String?
}

enum CharityStatus {
  in_review
  accepted
  rejected
}